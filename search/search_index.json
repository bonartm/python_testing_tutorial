{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Testing Tutorial \u00b6 I love Cologne \u00b6 This tutorial helps you to learn automated testing in Python 3 using the pytest framework. Goal: Count Words in Moby Dick \u00b6 Captain Ahab was vicious because Moby Dick, the white whale, had bitten off his leg. So the captain set sail for a hunt. For months he was searching the sea for the white whale. The captain finally attacked the whale with a harpoon. Unimpressed, the whale devoured captain, crew and ship. The whale won. Herman Melville's book \u201cMoby Dick\u201d describes the epic fight between the captain of a whaling ship and a whale. In the book, the whale wins by eating most of the other characters. But does he also win by being mentioned more often? In this course, you will test a program that is counting words in Melville's book. Preparations \u00b6 clone the repository: git clone https://github.com/bonartm/python_testing_tutorial.git install pytest : pip install pytest Chapters \u00b6 Unit Tests Fixtures Parameterized Tests Organizing Tests Test Coverage Recap Puzzle Appendix \u00b6 Quotes on Testing Instructions for Trainers Links \u00b6 Python Testing Tutorial - by Kathryn Huff Introduction to pytest - by Michael Tom-Wing and Christie Wilson Test & Code Podcast - by Brian Okken The Clean Code Talks \u2013 Unit Testing Test-Driven-Development - by H.Percival Sources \u00b6 Sources for this tutorial: github.com/krother/python_testing_tutorial . Copyright \u00b6 Feedback and comments are welcome at: krother@academis.eu \u00a9 2018 Magdalena & Kristian Rother Released under the conditions of a Creative Commons Attribution License 4.0. Contributors \u00b6 Kristian Rother, Magdalena Rother, Daniel Szoska","title":"Python Testing Tutorial"},{"location":"#python-testing-tutorial","text":"","title":"Python Testing Tutorial"},{"location":"#i-love-cologne","text":"This tutorial helps you to learn automated testing in Python 3 using the pytest framework.","title":"I love Cologne"},{"location":"#goal-count-words-in-moby-dick","text":"Captain Ahab was vicious because Moby Dick, the white whale, had bitten off his leg. So the captain set sail for a hunt. For months he was searching the sea for the white whale. The captain finally attacked the whale with a harpoon. Unimpressed, the whale devoured captain, crew and ship. The whale won. Herman Melville's book \u201cMoby Dick\u201d describes the epic fight between the captain of a whaling ship and a whale. In the book, the whale wins by eating most of the other characters. But does he also win by being mentioned more often? In this course, you will test a program that is counting words in Melville's book.","title":"Goal: Count Words in Moby Dick"},{"location":"#preparations","text":"clone the repository: git clone https://github.com/bonartm/python_testing_tutorial.git install pytest : pip install pytest","title":"Preparations"},{"location":"#chapters","text":"Unit Tests Fixtures Parameterized Tests Organizing Tests Test Coverage Recap Puzzle","title":"Chapters"},{"location":"#appendix","text":"Quotes on Testing Instructions for Trainers","title":"Appendix"},{"location":"#links","text":"Python Testing Tutorial - by Kathryn Huff Introduction to pytest - by Michael Tom-Wing and Christie Wilson Test & Code Podcast - by Brian Okken The Clean Code Talks \u2013 Unit Testing Test-Driven-Development - by H.Percival","title":"Links"},{"location":"#sources","text":"Sources for this tutorial: github.com/krother/python_testing_tutorial .","title":"Sources"},{"location":"#copyright","text":"Feedback and comments are welcome at: krother@academis.eu \u00a9 2018 Magdalena & Kristian Rother Released under the conditions of a Creative Commons Attribution License 4.0.","title":"Copyright"},{"location":"#contributors","text":"Kristian Rother, Magdalena Rother, Daniel Szoska","title":"Contributors"},{"location":"find_pairs/","text":"Recap Puzzle \u00b6 Match the test strategies with the correct descriptions. This exercise works best on the board or on paper.","title":"Recap Puzzle"},{"location":"find_pairs/#recap-puzzle","text":"Match the test strategies with the correct descriptions. This exercise works best on the board or on paper.","title":"Recap Puzzle"},{"location":"fixtures/","text":"Fixtures \u00b6 Sometimes you need to prepare test data (load files, create objects etc.). If you want to prepare the same data for multiple tests, you can use a fixture . Exercise 1: A module for test data \u00b6 Create a new module conftest.py in the same directory as your tests. There, add a function that loads the file data/mobydick_summary.txt : Place the decorator @pytest.fixture on top of it: import pytest @pytest . fixture def text_summary (): return open ( ... ) . read () Exercise 2: Using the fixture \u00b6 Now create a module test_corpus.py with a function that uses the fixture: def test_short_sample ( text_summary ): assert count_words ( text_summary ) == 77 Execute the module with pytest . Note that you do not need to import conftest . Pytest does that automatically. Exercise 3: Create more fixtures \u00b6 Create a fixture for the full text of the book mobydick_full.txt as well. Exercise 4: Fixtures from fixtures \u00b6 Create a fixture in conftest.py that prepares a dictionary with word counts using the word_counter.count_words_dict() function. from word_counter import count_words_dict @pytest . fixture def count_dict ( text_summary ): return ... Write a simple test that makes sure the dictionary is not empty.","title":"Fixtures"},{"location":"fixtures/#fixtures","text":"Sometimes you need to prepare test data (load files, create objects etc.). If you want to prepare the same data for multiple tests, you can use a fixture .","title":"Fixtures"},{"location":"fixtures/#exercise-1-a-module-for-test-data","text":"Create a new module conftest.py in the same directory as your tests. There, add a function that loads the file data/mobydick_summary.txt : Place the decorator @pytest.fixture on top of it: import pytest @pytest . fixture def text_summary (): return open ( ... ) . read ()","title":"Exercise 1: A module for test data"},{"location":"fixtures/#exercise-2-using-the-fixture","text":"Now create a module test_corpus.py with a function that uses the fixture: def test_short_sample ( text_summary ): assert count_words ( text_summary ) == 77 Execute the module with pytest . Note that you do not need to import conftest . Pytest does that automatically.","title":"Exercise 2: Using the fixture"},{"location":"fixtures/#exercise-3-create-more-fixtures","text":"Create a fixture for the full text of the book mobydick_full.txt as well.","title":"Exercise 3: Create more fixtures"},{"location":"fixtures/#exercise-4-fixtures-from-fixtures","text":"Create a fixture in conftest.py that prepares a dictionary with word counts using the word_counter.count_words_dict() function. from word_counter import count_words_dict @pytest . fixture def count_dict ( text_summary ): return ... Write a simple test that makes sure the dictionary is not empty.","title":"Exercise 4: Fixtures from fixtures"},{"location":"instructions_for_trainers/","text":"Instructions for Trainers \u00b6 This chapter aims to help you to run a tutorial on automated testing in Python. Our aim is to save you preparation time while leaving room for your own ideas. Most of all, we hope you have fun in your next course. How to run a course using this toolkit \u00b6 Introduce the Moby Dick Theme to your trainees Clone the repository Share the exercises with your trainees Start coding your way through the chapters Lesson plan for a 180' tutorial \u00b6 module topic time warm-up introduce the Moby Dick theme 5' warm-up announce training objectives 5' part 1 Writing automatic tests in Python 45\u2019 warm-up warmup question 5' new content presentation: Unit Tests in pytest 10\u2019 application exercises: Unit Tests 25\u2019 wrap-up Q & A 5\u2019 part 2 Test Strategies (45') warm-up quiz on test strategies 10' new content presentation on Test-Driven-Development 10\u2019 application exercises: fixtures and parameterized tests 20' wrap-up Q & A 5\u2019 break 10\u2019 part 3 Tests data and test suites (45') warm-up multiple choice questions 10' new content presentation on Integration and Acceptance Tests 10\u2019 application exercises: test collection and test coverage 20' wrap-up Q & A 5\u2019 summary Benefits of testing (25') transfer group discussion on benefits of testing 15\u2019 wrap-up recap puzzle 5\u2019 finishing summary 4\u2019 finishing goodbye 1' I used a similar lesson plan to conduct a training at EuroPython 2014. The audience consisted of about 60 Python programmers, including beginners and seasoned developers. Why the Moby Dick example? \u00b6 Three main reasons: The implementation is simple enough for beginners Counting words yields different border cases (because of upper/lower case, special characters etc), making a sufficient use case for testing You can easily change the theme to another book from Project Gutenberg .","title":"Instructions for Trainers"},{"location":"instructions_for_trainers/#instructions-for-trainers","text":"This chapter aims to help you to run a tutorial on automated testing in Python. Our aim is to save you preparation time while leaving room for your own ideas. Most of all, we hope you have fun in your next course.","title":"Instructions for Trainers"},{"location":"instructions_for_trainers/#how-to-run-a-course-using-this-toolkit","text":"Introduce the Moby Dick Theme to your trainees Clone the repository Share the exercises with your trainees Start coding your way through the chapters","title":"How to run a course using this toolkit"},{"location":"instructions_for_trainers/#lesson-plan-for-a-180-tutorial","text":"module topic time warm-up introduce the Moby Dick theme 5' warm-up announce training objectives 5' part 1 Writing automatic tests in Python 45\u2019 warm-up warmup question 5' new content presentation: Unit Tests in pytest 10\u2019 application exercises: Unit Tests 25\u2019 wrap-up Q & A 5\u2019 part 2 Test Strategies (45') warm-up quiz on test strategies 10' new content presentation on Test-Driven-Development 10\u2019 application exercises: fixtures and parameterized tests 20' wrap-up Q & A 5\u2019 break 10\u2019 part 3 Tests data and test suites (45') warm-up multiple choice questions 10' new content presentation on Integration and Acceptance Tests 10\u2019 application exercises: test collection and test coverage 20' wrap-up Q & A 5\u2019 summary Benefits of testing (25') transfer group discussion on benefits of testing 15\u2019 wrap-up recap puzzle 5\u2019 finishing summary 4\u2019 finishing goodbye 1' I used a similar lesson plan to conduct a training at EuroPython 2014. The audience consisted of about 60 Python programmers, including beginners and seasoned developers.","title":"Lesson plan for a 180' tutorial"},{"location":"instructions_for_trainers/#why-the-moby-dick-example","text":"Three main reasons: The implementation is simple enough for beginners Counting words yields different border cases (because of upper/lower case, special characters etc), making a sufficient use case for testing You can easily change the theme to another book from Project Gutenberg .","title":"Why the Moby Dick example?"},{"location":"organizing_tests/","text":"Organizing Tests \u00b6 Exercise 1: Test Classes \u00b6 Structure some of the tests you have written by placing them in a class. Make sure the name of the class starts with the word Test . Indent your test functions so that they belong to the class. Add self as the first parameter of each function: class TestDummy : def test_dummy ( self ): assert ... Exercise 2: Test collection \u00b6 Run all tests written so far by simply typing python -m pytest Exercise 3: Test selection \u00b6 Run only one test file: python -m pytest FILE_NAME Run only one test class: pytest -m pytest FILE_NAME::CLASS_NAME Finally, run a single test: pytest -m pytest FILE_NAME::CLASS_NAME::TEST_NAME Exercise 4: Options \u00b6 Find out which options of pytest do the following: more verbose output | re-run failing tests | stop on first test that fails pytest -lf pytest -v pytest -x","title":"Organizing Tests"},{"location":"organizing_tests/#organizing-tests","text":"","title":"Organizing Tests"},{"location":"organizing_tests/#exercise-1-test-classes","text":"Structure some of the tests you have written by placing them in a class. Make sure the name of the class starts with the word Test . Indent your test functions so that they belong to the class. Add self as the first parameter of each function: class TestDummy : def test_dummy ( self ): assert ...","title":"Exercise 1: Test Classes"},{"location":"organizing_tests/#exercise-2-test-collection","text":"Run all tests written so far by simply typing python -m pytest","title":"Exercise 2: Test collection"},{"location":"organizing_tests/#exercise-3-test-selection","text":"Run only one test file: python -m pytest FILE_NAME Run only one test class: pytest -m pytest FILE_NAME::CLASS_NAME Finally, run a single test: pytest -m pytest FILE_NAME::CLASS_NAME::TEST_NAME","title":"Exercise 3: Test selection"},{"location":"organizing_tests/#exercise-4-options","text":"Find out which options of pytest do the following: more verbose output | re-run failing tests | stop on first test that fails pytest -lf pytest -v pytest -x","title":"Exercise 4: Options"},{"location":"parameterized/","text":"Parameterized Tests \u00b6 Exercise 1: Sets of example data \u00b6 The tests in test_parameterized.py check a list of pairs (word, count) that apply to the text file mobydick_summary.txt : ```python PAIRS = [ ('whale', 5), ('goldfish', 0), ('captain', 4), ('white', 2), ('jellyfish', 99), ('harpoon', 1), ] ``` Run the tests and see what happens. Exercise 2: Fixing the test \u00b6 Fix the test by using the count.get(word) method instead of [word] . Run the test again. What happens? Exercise 3: Parameterize \u00b6 There is a deeper issue here. We want all test examples to be independent . We will create six tests from the example data. Use the test parametrization in pytest . Change the test function by adding the following decorator: import pytest @pytest . mark . parametrize ( 'word, number' , PAIRS ) def test_count_words_dict ( word , number ): ... The two arguments will be filled in automatically. Now remove the for loop. Run the test. You should see six tests instead of one. Make sure all six pass. Exercise 2: Write another parameterized test \u00b6 Use test parametrization to test the count_words() function on the following test cases. text expected result Call me Ishmael 3 . 0 1234 1 x 1 We are the Borg - Resistance is futile 7 Write one parameterized test that checks these five examples.","title":"Parameterized Tests"},{"location":"parameterized/#parameterized-tests","text":"","title":"Parameterized Tests"},{"location":"parameterized/#exercise-1-sets-of-example-data","text":"The tests in test_parameterized.py check a list of pairs (word, count) that apply to the text file mobydick_summary.txt : ```python PAIRS = [ ('whale', 5), ('goldfish', 0), ('captain', 4), ('white', 2), ('jellyfish', 99), ('harpoon', 1), ] ``` Run the tests and see what happens.","title":"Exercise 1: Sets of example data"},{"location":"parameterized/#exercise-2-fixing-the-test","text":"Fix the test by using the count.get(word) method instead of [word] . Run the test again. What happens?","title":"Exercise 2: Fixing the test"},{"location":"parameterized/#exercise-3-parameterize","text":"There is a deeper issue here. We want all test examples to be independent . We will create six tests from the example data. Use the test parametrization in pytest . Change the test function by adding the following decorator: import pytest @pytest . mark . parametrize ( 'word, number' , PAIRS ) def test_count_words_dict ( word , number ): ... The two arguments will be filled in automatically. Now remove the for loop. Run the test. You should see six tests instead of one. Make sure all six pass.","title":"Exercise 3: Parameterize"},{"location":"parameterized/#exercise-2-write-another-parameterized-test","text":"Use test parametrization to test the count_words() function on the following test cases. text expected result Call me Ishmael 3 . 0 1234 1 x 1 We are the Borg - Resistance is futile 7 Write one parameterized test that checks these five examples.","title":"Exercise 2: Write another parameterized test"},{"location":"quotes/","text":"Quotes \u00b6 \"Call me Ishmael\" Herman Melville, Moby Dick 1851 \"UNTESTED == BROKEN\" Schlomo Shapiro, EuroPython 2014 \"Code without tests is broken by design\u201d Jacob Kaplan-Moss \"Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?\" Brian Kernighan, \"The Elements of Programming Style\", 2 nd edition, chapter 2 \"Pay attention to zeros. If there is a zero, someone will divide by it.\" Cem Kaner \"If you don\u2019t care about quality, you can't meet any other requirement\u201d Gerald M. Weinberg \"Testing shows the presence, not the absence of bugs.\" Edsger W. Dijkstra \"... we have as many testers as we have developers. And testers spend all their time testing, and developers spend half their time testing. We're more of a testing, a quality software organization than we're a software organization.\" Bill Gates (Information Week, May 2002)","title":"Appendix: Quotes"},{"location":"quotes/#quotes","text":"\"Call me Ishmael\" Herman Melville, Moby Dick 1851 \"UNTESTED == BROKEN\" Schlomo Shapiro, EuroPython 2014 \"Code without tests is broken by design\u201d Jacob Kaplan-Moss \"Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?\" Brian Kernighan, \"The Elements of Programming Style\", 2 nd edition, chapter 2 \"Pay attention to zeros. If there is a zero, someone will divide by it.\" Cem Kaner \"If you don\u2019t care about quality, you can't meet any other requirement\u201d Gerald M. Weinberg \"Testing shows the presence, not the absence of bugs.\" Edsger W. Dijkstra \"... we have as many testers as we have developers. And testers spend all their time testing, and developers spend half their time testing. We're more of a testing, a quality software organization than we're a software organization.\" Bill Gates (Information Week, May 2002)","title":"Quotes"},{"location":"test_coverage/","text":"Test Coverage \u00b6 For the next exercises, you need to install a small plugin: pip install pytest-cov Exercise 1: Calculate Test Coverage \u00b6 Calculate the percentage of code covered by automatic tests: pytest --cov = . Instead of the . you can insert the path you would like to see in the coverage report. Check whether any hidden files have appeared. Exercise 2: Identify uncovered lines \u00b6 Find out which lines are not covered by tests. Execute ```bash python -m pytest --cov=. --cov-report html ``` Open the resulting file htmlcov/index.html in a web browser. Exercise 3: Increase test coverage \u00b6 Write more tests to increase the test coverage of word_counter.py to 100%. Reflection Questions \u00b6 does 100% test coverage mean that the program is free of bugs? does 100% test coverage mean that all execution paths in the program have been tested? what types of errors is a high test coverage most likely to avoid?","title":"Test Coverage"},{"location":"test_coverage/#test-coverage","text":"For the next exercises, you need to install a small plugin: pip install pytest-cov","title":"Test Coverage"},{"location":"test_coverage/#exercise-1-calculate-test-coverage","text":"Calculate the percentage of code covered by automatic tests: pytest --cov = . Instead of the . you can insert the path you would like to see in the coverage report. Check whether any hidden files have appeared.","title":"Exercise 1: Calculate Test Coverage"},{"location":"test_coverage/#exercise-2-identify-uncovered-lines","text":"Find out which lines are not covered by tests. Execute ```bash python -m pytest --cov=. --cov-report html ``` Open the resulting file htmlcov/index.html in a web browser.","title":"Exercise 2: Identify uncovered lines"},{"location":"test_coverage/#exercise-3-increase-test-coverage","text":"Write more tests to increase the test coverage of word_counter.py to 100%.","title":"Exercise 3: Increase test coverage"},{"location":"test_coverage/#reflection-questions","text":"does 100% test coverage mean that the program is free of bugs? does 100% test coverage mean that all execution paths in the program have been tested? what types of errors is a high test coverage most likely to avoid?","title":"Reflection Questions"},{"location":"unit_tests/","text":"Unit Tests \u00b6 Warming Up \u00b6 How many words are in the following sentence? \u00b6 Call me Ishmael. How many words are in the next sentence? \u00b6 \"you haint no objections to sharing a harpooneer's blanket, have ye? I s'pose you are goin' a-whalin', so you'd better get used to that sort of thing.\" Exercise 1: Test a Python function \u00b6 The function count_words() in the module word_counter.py calculates the number of words in a text body. For instance, we would expect the following input to result in a word count of 3 : Call me Ishmael Your task is to prove that the count_words() function in fact returns 3 . Run the example test in test_unit_test.py with python -m pytest test/test_unit_test.py Exercise 2: A test fails if code is broken \u00b6 Run the test in test_broken_code.py and inspect the output. It fails, because there is a bug in the function count_words() . The example string this time contains words separated by tabulators . Fix the code in word_counter.py , so that the test in test_broken_code.py passes. Exercise 3: A test fails if the test is broken \u00b6 Run the test in test_broken_test.py and inspect the output. It fails, because there is a bug in the test file. Fix the test code , so that the test passes. Exercise 4: Test border cases \u00b6 High quality tests cover many different situations. Common situations for the program word_counter.py include: test case description example input expected output empty input is valid, but empty \"\" 0 minimal smallest reasonable input \"whale\" 1 typical representative input \"whale eats captain\" 3 invalid input is supposed to fail 777 TypeError maximum largest reasonable input Melville's entire book > 200000 nasty difficult example \"That #~&%* program still doesn't work!\" 6 Your task is to make all tests in test_border_cases.py pass. Exercise 5: Special characters \u00b6 Add a new feature to the word_counter.py program. The program should remove special characters from the text before counting words. Your task is to write a test for this new feature.","title":"Unit Tests"},{"location":"unit_tests/#unit-tests","text":"","title":"Unit Tests"},{"location":"unit_tests/#warming-up","text":"","title":"Warming Up"},{"location":"unit_tests/#how-many-words-are-in-the-following-sentence","text":"Call me Ishmael.","title":"How many words are in the following sentence?"},{"location":"unit_tests/#how-many-words-are-in-the-next-sentence","text":"\"you haint no objections to sharing a harpooneer's blanket, have ye? I s'pose you are goin' a-whalin', so you'd better get used to that sort of thing.\"","title":"How many words are in the next sentence?"},{"location":"unit_tests/#exercise-1-test-a-python-function","text":"The function count_words() in the module word_counter.py calculates the number of words in a text body. For instance, we would expect the following input to result in a word count of 3 : Call me Ishmael Your task is to prove that the count_words() function in fact returns 3 . Run the example test in test_unit_test.py with python -m pytest test/test_unit_test.py","title":"Exercise 1: Test a Python function"},{"location":"unit_tests/#exercise-2-a-test-fails-if-code-is-broken","text":"Run the test in test_broken_code.py and inspect the output. It fails, because there is a bug in the function count_words() . The example string this time contains words separated by tabulators . Fix the code in word_counter.py , so that the test in test_broken_code.py passes.","title":"Exercise 2: A test fails if code is broken"},{"location":"unit_tests/#exercise-3-a-test-fails-if-the-test-is-broken","text":"Run the test in test_broken_test.py and inspect the output. It fails, because there is a bug in the test file. Fix the test code , so that the test passes.","title":"Exercise 3: A test fails if the test is broken"},{"location":"unit_tests/#exercise-4-test-border-cases","text":"High quality tests cover many different situations. Common situations for the program word_counter.py include: test case description example input expected output empty input is valid, but empty \"\" 0 minimal smallest reasonable input \"whale\" 1 typical representative input \"whale eats captain\" 3 invalid input is supposed to fail 777 TypeError maximum largest reasonable input Melville's entire book > 200000 nasty difficult example \"That #~&%* program still doesn't work!\" 6 Your task is to make all tests in test_border_cases.py pass.","title":"Exercise 4: Test border cases"},{"location":"unit_tests/#exercise-5-special-characters","text":"Add a new feature to the word_counter.py program. The program should remove special characters from the text before counting words. Your task is to write a test for this new feature.","title":"Exercise 5: Special characters"}]}